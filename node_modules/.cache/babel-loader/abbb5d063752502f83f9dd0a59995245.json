{"ast":null,"code":"var _jsxFileName = \"/Users/adirathgoswami/Desktop/codejune/numbersystemsite/frontend/src/components/Converter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst map1 = new Map([[\"decimal\", 10], [\"binary\", 2], [\"octal\", 8], [\"hexadecimal\", 16], [\"base-32\", 32]]);\n\nconst convertNumber = (num, baseOg, baseConv) => {\n  return parseInt(num, baseOg).toString(baseConv);\n};\n\nfunction Converter() {\n  _s();\n\n  const inputRef = useRef(null);\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []); //radio button logic to decide the base to and from to convert to \n\n  const [inpChoice, setInpChoice] = useState('decimal');\n  const [outChoice, setOutChoice] = useState('binary');\n\n  const updateInpChoice = event => {\n    setInpChoice(event.target.value);\n    console.log(inpChoice);\n  };\n\n  const updateOutChoice = event => {\n    setOutChoice(event.target.value);\n    console.log(outChoice);\n  };\n\n  const [outputNumber, setOutputNumber] = useState(0);\n\n  const updateOutputNumber = event => {\n    const num = event.target.value;\n    const a = map1.get(inpChoice);\n    const b = map1.get(outChoice);\n    setOutputNumber(convertNumber(num, a, b));\n  };\n\n  const checkNan = value => {\n    if (value === \"NaN\") {\n      return \"Invalid Input\";\n    } else {\n      return value;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"converter\",\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-head\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radbtns\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: updateOutputNumber,\n          ref: inputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: updateInpChoice,\n          type: \"radio\",\n          className: \"card-btns\",\n          value: \"decimal\",\n          name: \"inp\",\n          defaultChecked: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), \" decimal\", /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: updateInpChoice,\n          type: \"radio\",\n          className: \"card-btns\",\n          value: \"binary\",\n          name: \"inp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), \" binary\", /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: updateInpChoice,\n          type: \"radio\",\n          className: \"card-btns\",\n          value: \"octal\",\n          name: \"inp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), \" octal\", /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: updateInpChoice,\n          type: \"radio\",\n          className: \"card-btns\",\n          value: \"hexadecimal\",\n          name: \"inp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), \" hexadecimal\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-head\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        type: \"number\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: checkNan(outputNumber)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radbtns\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: updateOutChoice,\n          type: \"radio\",\n          className: \"card-btns\",\n          value: \"decimal\",\n          name: \"out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), \" decimal\", /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: updateOutChoice,\n          type: \"radio\",\n          className: \"card-btns\",\n          value: \"binary\",\n          name: \"out\",\n          defaultChecked: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), \" binary\", /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: updateOutChoice,\n          type: \"radio\",\n          className: \"card-btns\",\n          value: \"octal\",\n          name: \"out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), \" octal\", /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: updateOutChoice,\n          type: \"radio\",\n          className: \"card-btns\",\n          value: \"hexadecimal\",\n          name: \"out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), \" hexadecimal\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Converter, \"hLoVtkve7siRDWVj+gOgg8U2Mn8=\");\n\n_c = Converter;\nexport default Converter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Converter\");","map":{"version":3,"names":["React","useState","useRef","useEffect","map1","Map","convertNumber","num","baseOg","baseConv","parseInt","toString","Converter","inputRef","current","focus","inpChoice","setInpChoice","outChoice","setOutChoice","updateInpChoice","event","target","value","console","log","updateOutChoice","outputNumber","setOutputNumber","updateOutputNumber","a","get","b","checkNan"],"sources":["/Users/adirathgoswami/Desktop/codejune/numbersystemsite/frontend/src/components/Converter.jsx"],"sourcesContent":["import React, { useState , useRef , useEffect} from \"react\";\n\nconst map1 = new Map([\n    [\"decimal\", 10],\n    [\"binary\", 2],\n    [\"octal\", 8],\n    [\"hexadecimal\", 16],\n    [\"base-32\", 32]\n])\n\nconst convertNumber = (num, baseOg, baseConv)=>{\n    return parseInt(num, baseOg).toString(baseConv);\n}\n\nfunction Converter() {\n\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        inputRef.current.focus();\n      }, []);\n\n\n    //radio button logic to decide the base to and from to convert to \n    const [inpChoice, setInpChoice] = useState('decimal');\n    const [outChoice, setOutChoice] = useState('binary');\n    const updateInpChoice = (event) => {\n        setInpChoice(event.target.value)\n        console.log(inpChoice)\n    }\n    const updateOutChoice = (event) => {\n        setOutChoice(event.target.value)\n        console.log(outChoice)\n    }\n\n    const [outputNumber, setOutputNumber] = useState(0);\n\n\n    const updateOutputNumber = (event)=>{\n        const num = event.target.value\n\n        const a = map1.get(inpChoice);\n        const b = map1.get(outChoice);\n\n        setOutputNumber(convertNumber(num , a, b))\n    }\n\n    const checkNan = (value) => {\n        if(value === \"NaN\"){\n            return \"Invalid Input\"\n        } else{\n            return value\n        }\n    }\n\n    return (\n        <div id=\"converter\" className=\"container\">\n            <div className=\"card\">\n                <div className=\"card-head\">\n                    <h3>Input</h3>\n                </div>\n                <div className=\"radbtns\">\n                <input type=\"text\" onChange={updateOutputNumber} ref={inputRef} />\n                    <input onChange={updateInpChoice} type=\"radio\" className=\"card-btns\" value=\"decimal\" name=\"inp\" defaultChecked /> decimal\n                    <input onChange={updateInpChoice} type=\"radio\" className=\"card-btns\" value=\"binary\" name=\"inp\" /> binary\n                    <input onChange={updateInpChoice} type=\"radio\" className=\"card-btns\" value=\"octal\" name=\"inp\" /> octal\n                    <input onChange={updateInpChoice} type=\"radio\" className=\"card-btns\" value=\"hexadecimal\" name=\"inp\" /> hexadecimal\n                </div>\n            </div>\n            <div className=\"card\">\n                <div className=\"card-head\">\n                    <h3>Output</h3>\n                </div>\n                {/* <p type=\"number\">num: {number}</p> */}\n                <p type=\"number\"><span>{checkNan(outputNumber)}</span></p>\n                <div className=\"radbtns\">\n                    <input onChange={updateOutChoice} type=\"radio\" className=\"card-btns\" value=\"decimal\" name=\"out\" /> decimal\n                    <input onChange={updateOutChoice} type=\"radio\" className=\"card-btns\" value=\"binary\" name=\"out\" defaultChecked/> binary\n                    <input onChange={updateOutChoice} type=\"radio\" className=\"card-btns\" value=\"octal\" name=\"out\" /> octal\n                    <input onChange={updateOutChoice} type=\"radio\" className=\"card-btns\" value=\"hexadecimal\" name=\"out\" /> hexadecimal\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Converter;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,MAA3B,EAAoCC,SAApC,QAAoD,OAApD;;AAEA,MAAMC,IAAI,GAAG,IAAIC,GAAJ,CAAQ,CACjB,CAAC,SAAD,EAAY,EAAZ,CADiB,EAEjB,CAAC,QAAD,EAAW,CAAX,CAFiB,EAGjB,CAAC,OAAD,EAAU,CAAV,CAHiB,EAIjB,CAAC,aAAD,EAAgB,EAAhB,CAJiB,EAKjB,CAAC,SAAD,EAAY,EAAZ,CALiB,CAAR,CAAb;;AAQA,MAAMC,aAAa,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,QAAd,KAAyB;EAC3C,OAAOC,QAAQ,CAACH,GAAD,EAAMC,MAAN,CAAR,CAAsBG,QAAtB,CAA+BF,QAA/B,CAAP;AACH,CAFD;;AAIA,SAASG,SAAT,GAAqB;EAAA;;EAEjB,MAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAD,CAAvB;EAEAC,SAAS,CAAC,MAAM;IACZU,QAAQ,CAACC,OAAT,CAAiBC,KAAjB;EACD,CAFM,EAEJ,EAFI,CAAT,CAJiB,CASjB;;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,SAAD,CAA1C;EACA,MAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,QAAD,CAA1C;;EACA,MAAMmB,eAAe,GAAIC,KAAD,IAAW;IAC/BJ,YAAY,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;IACAC,OAAO,CAACC,GAAR,CAAYT,SAAZ;EACH,CAHD;;EAIA,MAAMU,eAAe,GAAIL,KAAD,IAAW;IAC/BF,YAAY,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;IACAC,OAAO,CAACC,GAAR,CAAYP,SAAZ;EACH,CAHD;;EAKA,MAAM,CAACS,YAAD,EAAeC,eAAf,IAAkC3B,QAAQ,CAAC,CAAD,CAAhD;;EAGA,MAAM4B,kBAAkB,GAAIR,KAAD,IAAS;IAChC,MAAMd,GAAG,GAAGc,KAAK,CAACC,MAAN,CAAaC,KAAzB;IAEA,MAAMO,CAAC,GAAG1B,IAAI,CAAC2B,GAAL,CAASf,SAAT,CAAV;IACA,MAAMgB,CAAC,GAAG5B,IAAI,CAAC2B,GAAL,CAASb,SAAT,CAAV;IAEAU,eAAe,CAACtB,aAAa,CAACC,GAAD,EAAOuB,CAAP,EAAUE,CAAV,CAAd,CAAf;EACH,CAPD;;EASA,MAAMC,QAAQ,GAAIV,KAAD,IAAW;IACxB,IAAGA,KAAK,KAAK,KAAb,EAAmB;MACf,OAAO,eAAP;IACH,CAFD,MAEM;MACF,OAAOA,KAAP;IACH;EACJ,CAND;;EAQA,oBACI;IAAK,EAAE,EAAC,WAAR;IAAoB,SAAS,EAAC,WAA9B;IAAA,wBACI;MAAK,SAAS,EAAC,MAAf;MAAA,wBACI;QAAK,SAAS,EAAC,WAAf;QAAA,uBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ,eAII;QAAK,SAAS,EAAC,SAAf;QAAA,wBACA;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAEM,kBAA7B;UAAiD,GAAG,EAAEhB;QAAtD;UAAA;UAAA;UAAA;QAAA,QADA,eAEI;UAAO,QAAQ,EAAEO,eAAjB;UAAkC,IAAI,EAAC,OAAvC;UAA+C,SAAS,EAAC,WAAzD;UAAqE,KAAK,EAAC,SAA3E;UAAqF,IAAI,EAAC,KAA1F;UAAgG,cAAc;QAA9G;UAAA;UAAA;UAAA;QAAA,QAFJ,2BAGI;UAAO,QAAQ,EAAEA,eAAjB;UAAkC,IAAI,EAAC,OAAvC;UAA+C,SAAS,EAAC,WAAzD;UAAqE,KAAK,EAAC,QAA3E;UAAoF,IAAI,EAAC;QAAzF;UAAA;UAAA;UAAA;QAAA,QAHJ,0BAII;UAAO,QAAQ,EAAEA,eAAjB;UAAkC,IAAI,EAAC,OAAvC;UAA+C,SAAS,EAAC,WAAzD;UAAqE,KAAK,EAAC,OAA3E;UAAmF,IAAI,EAAC;QAAxF;UAAA;UAAA;UAAA;QAAA,QAJJ,yBAKI;UAAO,QAAQ,EAAEA,eAAjB;UAAkC,IAAI,EAAC,OAAvC;UAA+C,SAAS,EAAC,WAAzD;UAAqE,KAAK,EAAC,aAA3E;UAAyF,IAAI,EAAC;QAA9F;UAAA;UAAA;UAAA;QAAA,QALJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAJJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAaI;MAAK,SAAS,EAAC,MAAf;MAAA,wBACI;QAAK,SAAS,EAAC,WAAf;QAAA,uBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ,eAKI;QAAG,IAAI,EAAC,QAAR;QAAA,uBAAiB;UAAA,UAAOa,QAAQ,CAACN,YAAD;QAAf;UAAA;UAAA;UAAA;QAAA;MAAjB;QAAA;QAAA;QAAA;MAAA,QALJ,eAMI;QAAK,SAAS,EAAC,SAAf;QAAA,wBACI;UAAO,QAAQ,EAAED,eAAjB;UAAkC,IAAI,EAAC,OAAvC;UAA+C,SAAS,EAAC,WAAzD;UAAqE,KAAK,EAAC,SAA3E;UAAqF,IAAI,EAAC;QAA1F;UAAA;UAAA;UAAA;QAAA,QADJ,2BAEI;UAAO,QAAQ,EAAEA,eAAjB;UAAkC,IAAI,EAAC,OAAvC;UAA+C,SAAS,EAAC,WAAzD;UAAqE,KAAK,EAAC,QAA3E;UAAoF,IAAI,EAAC,KAAzF;UAA+F,cAAc;QAA7G;UAAA;UAAA;UAAA;QAAA,QAFJ,0BAGI;UAAO,QAAQ,EAAEA,eAAjB;UAAkC,IAAI,EAAC,OAAvC;UAA+C,SAAS,EAAC,WAAzD;UAAqE,KAAK,EAAC,OAA3E;UAAmF,IAAI,EAAC;QAAxF;UAAA;UAAA;UAAA;QAAA,QAHJ,yBAII;UAAO,QAAQ,EAAEA,eAAjB;UAAkC,IAAI,EAAC,OAAvC;UAA+C,SAAS,EAAC,WAAzD;UAAqE,KAAK,EAAC,aAA3E;UAAyF,IAAI,EAAC;QAA9F;UAAA;UAAA;UAAA;QAAA,QAJJ;MAAA;QAAA;QAAA;QAAA;MAAA,QANJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAbJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA6BH;;GAtEQd,S;;KAAAA,S;AAwET,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}